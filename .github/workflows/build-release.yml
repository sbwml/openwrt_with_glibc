name: Build releases

on:
  workflow_dispatch:
  repository_dispatch:
    types: [build]

jobs:
  build:
    name: Build ${{ matrix.model }}-${{ matrix.tag.version }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        model:
          - armv8
          - nanopi-r4s
          - nanopi-r5s
          - x86_64
        tag:
          - type: rc2
            version: openwrt-23.05

    steps:
    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Install LLVM
      uses: sbwml/actions@install-llvm-19

    - name: Compile OpenWrt
      id: compile
      continue-on-error: true
      working-directory: /builder
      env:
        git_password: ${{ secrets.ftp_password }}
      run: |
        export PATH="/opt/clang/bin:$PATH"
        export ENABLE_GLIBC=y BUILD_FAST=y KERNEL_CLANG_LTO=y ENABLE_BPF=y ENABLE_LRNG=y USE_GCC15=y ENABLE_LTO=y ENABLE_MOLD=y
        bash <(curl -sS ${{ secrets.script_url_general }}) ${{ matrix.tag.type }} ${{ matrix.model }}
        cd openwrt
        tags=$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Extensive logs after a failed compilation
      if: steps.compile.outcome == 'failure'
      working-directory: /builder
      run: |
        export PATH="/opt/clang/bin:$PATH"
        cd openwrt
        make V=s

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom info
        if [ "${{ matrix.model }}" = "armv8" ]; then
          tar zcf rom/u-boot-qemu_armv8.tar.gz -C openwrt/bin/targets/armsr/armv8*/ ./u-boot-qemu_armv8
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-initramfs-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/armsr/armv8*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "nanopi-r4s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*-r4s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "nanopi-r5s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        fi

    - name: Create release
      uses: ncipollo/release-action@main
      with:
        name: OpenWrt-${{ env.latest_release }}
        allowUpdates: true
        tag: ${{ env.latest_release }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.workflow_token }}
        artifacts: /builder/rom/*
