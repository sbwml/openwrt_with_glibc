name: Build releases

on:
  workflow_dispatch:
  repository_dispatch:
    types: [build]

jobs:
  build:
    name: Build ${{ matrix.model }}-${{ matrix.tag.version }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        model:
          - armv8
          - nanopi-r4s
          - nanopi-r5s
          - x86_64
        tag:
          - type: rc2
            version: openwrt-23.05

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Free disk space
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo bash -c "curl -s ${{ secrets.ubuntu_apt }} > /etc/apt/sources.list"
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker > /dev/null 2>&1
        sudo snap set system refresh.retain=2 > /dev/null 2>&1
        sudo apt-get -y purge firefox clang* gcc-12 gcc-14 ghc* google* llvm* mono* mongo* mysql* php* > /dev/null 2>&1
        sudo apt-get -y autoremove --purge > /dev/null 2>&1
        sudo apt-get clean > /dev/null 2>&1
        sudo rm -rf /etc/mysql /etc/php /usr/lib/{jvm,llvm} /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm} /usr/libexec/gcc/x86_64-linux-gnu/14 /usr/lib/x86_64-linux-gnu/{*clang*,*LLVM*} /home/linuxbrew
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th / /mnt

    - name: Create Swap
      run: |
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        free -h | grep -i swap

    - name: Build System Setup
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -Th / /mnt

    - name: Create VG & LV
      run: |
        mnt_size=$(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//')
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 2)
        sudo truncate -s "$mnt_size"G /mnt/mnt.img
        sudo truncate -s "$root_size"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner

    - name: Mount LV
      run: |
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner:runner /builder
        df -Th / /mnt /builder

    - name: Install LLVM
      run: |
        export PATH="/opt/clang/bin:$PATH"
        mkdir /opt/clang
        wget -q https://github.com/sbwml/redhat-llvm-project/releases/download/18.1.8/clang-18.1.8-x86_64-redhat-linux.tar.xz
        sudo tar --strip-components=1 -C /opt/clang -xf clang-18.1.8-x86_64-redhat-linux.tar.xz
        rm -rf clang-18.1.8-x86_64-redhat-linux.tar.xz
        clang --version

    - name: Compile OpenWrt
      id: compile
      continue-on-error: true
      working-directory: /builder
      run: |
        export PATH="/opt/clang/bin:$PATH"
        export ENABLE_GLIBC=y BUILD_FAST=y KERNEL_CLANG_LTO=y ENABLE_BPF=y ENABLE_LRNG=y USE_GCC15=y ENABLE_LTO=y ENABLE_MOLD=y
        bash <(curl -sS ${{ secrets.script_url_general }}) ${{ matrix.tag.type }} ${{ matrix.model }}
        cd openwrt
        tags=$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Extensive logs after a failed compilation
      if: steps.compile.outcome == 'failure'
      working-directory: /builder
      run: |
        export PATH="/opt/clang/bin:$PATH"
        cd openwrt
        make V=s

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom info
        if [ "${{ matrix.model }}" = "armv8" ]; then
          tar zcf rom/u-boot-qemu_armv8.tar.gz -C openwrt/bin/targets/armsr/armv8*/ ./u-boot-qemu_armv8
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-initramfs-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/armsr/armv8*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "nanopi-r4s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*-r4s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "nanopi-r5s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        fi

    - name: Create release
      uses: ncipollo/release-action@main
      with:
        name: OpenWrt-${{ env.latest_release }}
        allowUpdates: true
        tag: ${{ env.latest_release }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.workflow_token }}
        artifacts: /builder/rom/*
